name: Releasing

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check actor permission
        shell: bash
        run: |
          actor_permission=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${GITHUB_REPOSITORY}/collaborators/${GITHUB_ACTOR}/permission" \
            --jq .permission)
          if [[ "${actor_permission}" != "admin" ]]; then
            echo "Only admin users can release a new version."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check out
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version-file: .nvmrc
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Run E2E tests
        run: xvfb-run -a npm run test:e2e

      - name: Publish
        run: npm run release
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

      - name: Create GitHub release
        shell: bash
        run: |
          new_version=$(npm pkg get version | tr -d '"')
          gh release create "v${new_version}" --generate-notes
          release_url=$(gh release view --json url --jq '.url')
          echo "::notice::${release_url} was created successfully. Adjust the release notes from the changelog to keep the consistency with other releases."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
